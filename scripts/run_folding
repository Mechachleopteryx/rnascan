# Copyright (C) 2014-2015 Kate Cook, 2017 Kevin Ha
#
# This file is part of rnascan.
#
# rnascan is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# rnascan is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with rnascan.  If not, see <http://www.gnu.org/licenses/>.

import sys
import argparse
from Bio import SeqIO
from rnascan.average_structure import get_structure_probability_matrix_for_sequence
from rnascan.pfmutil import write_pfm
import multiprocessing
from itertools import izip, repeat

parser = argparse.ArgumentParser(description='Calculate the average structural profile of an RNA sequence.')
parser.add_argument("infile",help="name of file containing input RNA sequence to fold, in fasta format")
parser.add_argument("outfile",help="filename for output")
parser.add_argument("-w","--window_size", type=int, default=100, help="size of folding window (in nt) default: 100")
parser.add_argument("-o","--overlap_size", type=int, default=95, help="overlap between folding windows (in nt) default: 95")
parser.add_argument("-c", "--cores", type=int, default=8, help="# of cores")


args = parser.parse_args()


def batch_iterator(iterator, batch_size):
    """Returns lists of length batch_size.
    Source: http://biopython.org/wiki/Split_large_file
    """
    entry = True  # Make sure we loop once
    while entry:
        batch = []
        while len(batch) < batch_size:
            try:
                entry = iterator.next()
            except StopIteration:
                entry = None
            if entry is None:
                # End of file
                break
            batch.append(entry)
        if batch:
            yield batch


#print "window size: "+str(args.window_size)
#print "overlap size: "+str(args.overlap_size)
def fold(seq_record, args):
    seq_id = seq_record.id
    seq = seq_record.seq
    # Skip if sequence is less than 50
    if len(seq) <= 50:
        # continue
        return None
    outfile = "%s/structure.%s.txt" % (args.outfile, seq_id)
    print >> sys.stderr, outfile
    structure = get_structure_probability_matrix_for_sequence(seq_id,seq,args.window_size,args.overlap_size)
    write_pfm(structure,outfile)


def fold_star(a_b):
    fold(*a_b)


seq_iter = SeqIO.parse(args.infile, 'fasta')
p = multiprocessing.Pool(8)
for i, batch in enumerate(batch_iterator(seq_iter, 1000)):
    batch_results = p.map(fold_star, izip(batch, repeat(args)))
p.close()
seq_iter.close()
